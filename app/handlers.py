import locale
from lib2to3.fixes.fix_input import context
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import timedelta
import re
from sqlalchemy import types, select, Update
from datetime import datetime
import asyncio
import io
import logging
from aiogram import types
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from aiogram.types import BufferedInputFile

from app.utils.llm_interface import ask_llm_ollama

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

locale.setlocale(locale.LC_TIME, 'russian')
import app.keyboards as kb
import app.database.requests_bot as rq_b
from app.database.models import async_session, Clients, Menu, Reservations, Tables, Restaurants, Preorder, EventTypes, \
    EventApplications
import app.utils.request_web as pars
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Register_number(StatesGroup):
    phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class Register(StatesGroup):
    reservation_id = State()
    rest_id = State()
    rest_address = State()
    date = State()
    time = State()
    hours = State()
    number_of_guests = State()
    table_choice = State()

    preorder = State()
    name = State()
    confirm = State()


class CancelReservation(StatesGroup):
    name = State()
    date = State()
    time = State()
    number_of_guests = State()
    confirm_cancel = State()


class Edit(StatesGroup):
    date = State()
    time = State()
    number_of_guests = State()
    name = State()
    number = State()
    confirm = State()


class ReviewForm(StatesGroup):
    text = State()
    rating = State()


class EventApplicationStates(StatesGroup):
    event_type = State()               # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å–≤–∞–¥—å–±–∞, –±–∞–Ω–∫–µ—Ç –∏ —Ç.–¥.)
    restaurant_choice = State()        # –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "–Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"
    requested_date = State()           # –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    guest_count = State()              # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
    message_to_manager = State()       # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    confirm_application = State()      # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await rq_b.set_user(
            tg_id=message.from_user.id,
            tg_user_name=message.from_user.username
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        photo_path = 'D:/PycharmProjects/gurman/—Ä–µ—Å—Ç–∏–∫_–ø—Ä–∏–≤–µ—Ç_cut.jpg'
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ Gourman, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –≤–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞—Ç—å! ü§©"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_missing = await rq_b.check_number(message.from_user.id)
        if phone_missing:
            await message.answer(
                "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:",
                reply_markup=kb.get_number()
            )
            await state.set_state(Register_number.phone)
        else:
            await message.answer("–ú—ã —É–∂–µ —Ç–µ–±—è –∂–¥–µ–º!", reply_markup=kb.main)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.message(Register_number.phone)
async def register_number(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        phone = message.contact.phone_number if message.contact else message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
        if not re.match(r"^\+7\d{10}$", phone):
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX."
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            from sqlalchemy import update
            await session.execute(
                update(Clients)
                .where(Clients.tg_id == message.from_user.id)
                .values(phone_number=phone)
            )
            await session.commit()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ü§©",
            reply_markup=kb.main
        )
        await state.clear()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()




@router.callback_query(F.data.startswith("cancel_history:"))
async def cancel_booking(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    booking_id = int(callback.data.split(":")[1])
    try:
        async with async_session() as session:
            from sqlalchemy import update
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω–æ"
            await session.execute(
                update(Reservations)
                .where(Reservations.reservation_id == booking_id)
                .values(reservation_status='–æ—Ç–º–µ–Ω–µ–Ω–æ')
            )
            await session.commit()
        await callback.message.edit_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.")



@router.callback_query(lambda c: c.data == 'back')
async def process_back_button(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=kb.main
    )

@router.callback_query(lambda c: c.data == 'back_category_find')
async def process_back_button(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer(
        '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=kb.back_to_categories_keyboard()
    )


@router.message(F.text == '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
async def my_bookings(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è".
    """
    try:
        user_id = message.from_user.id
        async with async_session() as session:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = (
                select(
                    Reservations,  # –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
                    Tables.table_number,  # –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞
                    Restaurants.address,  # –ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                    Restaurants.restaurant_name
                )
                .join(Clients, Reservations.client_id == Clients.client_id)
                .join(Tables, Reservations.table_id == Tables.table_id)
                .join(Restaurants, Tables.restaurant_id == Restaurants.restaurant_id)
                .where(
                    Clients.tg_id == user_id,
                    Reservations.reservation_date_time >= datetime.now() ,Reservations.reservation_status == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                )
            )
            result = await session.execute(query)
            bookings = result.all()

            if not bookings:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
                return

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞—Ç–µ
            bookings.sort(key=lambda x: x[0].reservation_date_time)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            await message.answer("üìå –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for booking, table_number, address,restaurant_name in bookings:
                text = (
                    f"üìç –†–µ—Å—Ç–æ—Ä–∞–Ω : {restaurant_name}\n\n"
                    # f"  –ø–æ –∞–¥—Ä–µ—Å—É: {address}\n\n"
                    f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking.reservation_date_time.strftime('%d-%m-%Y %H:%M')}\n"
                    f"‚è≥ –ß–∞—Å—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.reservation_hours}\n"
                    f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {booking.guest_count}\n"
                    f"üí∫ –°—Ç–æ–ª–∏–∫: {table_number}\n"
                    f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking.reservation_status}\n"
                )
                await message.answer(
                    text,
                    reply_markup=kb.booking_keyboard(booking.reservation_id, True)
                )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("preorder_history:"))
async def view_preorder(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        data_parts = callback.data.split(":")
        if len(data_parts) < 2 or not data_parts[1].isdigit():
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        booking_id = int(data_parts[1])

        async with async_session() as session:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞—Ö –ø–æ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            query = (
                select(
                    Menu.name_dish,  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
                    Preorder.quantity  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                )
                .join(Menu, Preorder.menu_id == Menu.menu_id)  # –î–∂–æ–∏–Ω —Å –º–µ–Ω—é
                .where(Preorder.reservation_id == booking_id)  # –£—Å–ª–æ–≤–∏–µ –ø–æ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            )
            result = await session.execute(query)
            preorders = result.all()

            if not preorders:
                await callback.message.edit_text("–ù–µ—Ç –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
            text = "üìã –í–∞—à–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã:\n\n"
            for name_dish, quantity in preorders:
                text += f"üçΩ {name_dish}: {quantity} —à—Ç.\n"

            # await callback.message.edit_text(text)
            # await callback.answer("–ü—Ä–µ–¥–∑–∞–∫–∞–∑—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await callback.message.answer(text)
            await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–æ–≤.")


# handlers.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î


@router.callback_query(F.data.startswith("review_history:"))
async def start_review(callback: CallbackQuery, state: FSMContext):
    _, reservation_id = callback.data.split(":")
    await state.update_data(reservation_id=reservation_id)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await state.set_state(ReviewForm.text)


@router.message(ReviewForm.text)
async def ask_rating(message: Message, state: FSMContext):
    await state.update_data(review_text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:")
    await state.set_state(ReviewForm.rating)

@router.message(ReviewForm.rating)
async def handle_save_review(message: Message, state: FSMContext):
    data = await state.get_data()

    try:
        rating = int(message.text)
        if not 1 <= rating <= 5:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    review_text = data['review_text']
    reservation_id = data['reservation_id']

    async with async_session() as session:
        result = await session.execute(
            select(Clients.client_id).where(Clients.tg_id == message.from_user.id)
        )
        client_id_db = result.scalar()

    if not client_id_db:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start.")
        return

    success = await rq_b.save_review_to_db(
        client_id=client_id_db,
        review_text=review_text,
        rating=rating,
        reservation_id=reservation_id
    )

    if success:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

from app.utils.request_web import fetch_restoclub_promotions



@router.message(F.text == "–ê–∫—Ü–∏–∏ –∏ –Ω–æ–≤–∏–Ω–∫–∏")
async def sales(message: Message):
    keyboard = kb.salas_new_kb()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:", reply_markup=keyboard)

@router.callback_query(F.data == 'new_dishes')
async def new_dishes_info(callback: CallbackQuery):
    text = """
üçΩÔ∏è –ù–æ–≤–∏–Ω–∫–∏ –≤ –º–µ–Ω—é:

1. ü•ê –í–∞—Ñ–ª–∏ —Å –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ —Å–∞–ª–∞—Ç–æ–º  
   ‚Äî –ê–≤—Ç–æ—Ä: –ê–Ω–¥—Ä–µ–π –ñ–¥–∞–Ω–æ–≤ (—à–µ—Ñ Modus, –ú–æ—Å–∫–≤–∞)

2. üêü –ú–∏–º–æ–∑–∞ —Å —Ñ–æ—Ä–µ–ª—å—é –∏ —Ç–æ–±–∏–∫–æ 
   ‚Äî –ê–≤—Ç–æ—Ä: –ê–ª–µ–∫—Å–µ–π –ì–∞–≤—Ä–∏–ª–∏–Ω (¬´–ö–ª—ë–≤–æ –°–æ—á–∏ –ú–æ—Ä—Å–∫–æ–π –ü–æ—Ä—Ç¬ª)

3. üçó –¶—ã–ø–ª—ë–Ω–æ–∫ —Å –≥—Ä–µ—á–∫–æ–π  
   ‚Äî –ê–≤—Ç–æ—Ä: –†—É—Å–ª–∞–Ω –ü–µ—Ç—Ä–æ–≤ (Mishka, –ú–æ—Å–∫–≤–∞)

4. üêü –ó–∞–ª–∏–≤–Ω–æ–µ –∏–∑ —Ä—ã–±—ã  
   ‚Äî –ê–≤—Ç–æ—Ä: –í–ª–∞–¥ –ü–∏—Å–∫—É–Ω–æ–≤ (¬´–ú–∞—Ç—Ä—ë—à–∫–∞¬ª, Maison Dellos)

5. üê∫ –í–∞–≥—É—Ä–∏ ‚Äì –±–∞—Ä–∞–Ω–∏–Ω–∞ –ø–æ-–±—É—Ö–∞—Ä—Å–∫–∏  
   ‚Äî –ê–≤—Ç–æ—Ä: –†—É—Å–ª–∞–Ω –ò—Ç–∞–ª–º–∞–∑–æ–≤ (LALI, Family Garden, –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞)
"""
    await callback.message.edit_text(text)



def format_news_message(news_list: list) -> str:
    if not news_list:
        return "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    message = "üóûÔ∏è <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏:</b>\n\n"
    for item in news_list:
        title = item["title"]
        description = item["description"]
        link = item["link"].replace(" ", "")  # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
        message += f"üìå <b>{title}</b>\n{description}\n<a href='{link}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n\n"

    return message.strip()


@router.callback_query(F.data == 'news')
async def show_news(callback: CallbackQuery):
    url = "https://restoranoff.ru/news/newsfeed/"
    news_list = await pars.parse_restoranoff_news_async(url)
    message_text = format_news_message(news_list)

    await callback.message.answer(message_text, parse_mode="HTML")


@router.callback_query(F.data == 'promotions')
async def show_restoclub_promotions(callback: CallbackQuery):
    try:
        phot = FSInputFile('D:\\PycharmProjects\\gurman\\sale.jpg')
        await callback.message.answer_photo(phot)
        promotions = await fetch_restoclub_promotions()

        if not promotions:
            await callback.message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π.")
            return

        response = "üéÅ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ú–æ—Å–∫–≤—ã:\n\n"
        for promo in promotions:
            response += (
                f"üìç {promo['restaurant']}\n"
                f"üì∞ {promo['title']}\n"
                f"üí¨ {promo['description']}\n\n"
            )

        await callback.message.answer(response)
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")


CATEGORIES = {
    "category_0": {
        "name": "–ö—É–¥–∞ –ø–æ–π—Ç–∏ —Å –¥–µ—Ç—å–º–∏",
        "url": "https://www.restoclub.ru/msk/search/restorany-moskvy-s-detskoj-komnatoj"
    },
    "category_1": {
        "name": "–ù–æ–≤—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "url": "https://www.restoclub.ru/msk/search/novye-restorany-kafe-i-bary-v-moskve"
    },
    "category_2": {
        "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã",
        "url": "https://www.restoclub.ru/msk/ratings/reiting-380-restoranov"
    },
    "category_3": {
        "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ —Å –≤–µ—Ä–∞–Ω–¥–æ–π",
        "url": "https://www.restoclub.ru/msk/search/restorany-moskvy-s-letnej-terrasoj"  # –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å
    },
    "category_4": {
        "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –ª–∞–Ω—á–∞–º–∏",
        "url": "https://www.restoclub.ru/msk/search/restorany-moskvy-s-letnej-terrasoj"
    },
    "category_5": {
        "name": "–ö–æ—Ñ–µ–π–Ω–∏ –ú–æ—Å–∫–≤—ã",
        "url": "https://www.restoclub.ru/msk/search/kofejnja-moskvy"
    },
}

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.")

#------------------------------------–ß–∞—Å—Ç–æ –∏—â—É—Ç üîé –ö–ê–¢–ï–ì–û–†–ò–ò

@router.message(F.text == "–ß–∞—Å—Ç–æ –∏—â—É—Ç üîé")
async def show_categories(message: Message):
    keyboard = kb.get_categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@router.callback_query(F.data == "show_categories")
async def handle_back_to_categories(callback: CallbackQuery):
    keyboard = kb.get_categories_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("category_"))
async def process_category_callback(callback: CallbackQuery):
    key = callback.data
    category = CATEGORIES.get(key)

    if not category:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await callback.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é: {category['name']}...")

    results = await pars.parse_category_page_async(category["url"])

    if not results:
        await callback.message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∫—É—Ö–Ω–∏.")
        return

    text = f"üìç <b>{category['name']}</b>:\n\n"

    for r in results[:5]:
        # –°—Å—ã–ª–∫–∞ –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π –≤ markdown/html:
        link_text = r['link'] if r['link'] == "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" else f'<a href="{r["link"]}">–°—Å—ã–ª–∫–∞</a>'

        text += (
            f"üçΩ <b>{r['name']}</b>\n"
            f"üì∞ {r['title']}\n"
            f"üí¨ {r['description']}\n"
            f"üîó {link_text}\n\n"
        )

    await callback.message.answer(text, parse_mode="HTML",reply_markup=kb.back_to_categories_keyboard())

#-------------------–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞ –∏ –∫—É—Ö–Ω–∏
# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ö–æ–Ω—å
POPULAR_KITCHENS = {
    "kitchen_–≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ_—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": {"name": "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "url": "https://www.restoclub.ru/msk/search/restorany-gruzinskoj-kuhni-v-moskve"},
    "kitchen_–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ_—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": {"name": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "url": "https://www.restoclub.ru/msk/search/restorany-italjanskoj-kuhni-v-moskve"},
    "kitchen_—è–ø–æ–Ω—Å–∫–∏–µ_—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã": {"name": "–Ø–ø–æ–Ω—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "url": "https://www.restoclub.ru/msk/search/japonskie-restorany-v-moskve"},
    "kitchen_—Å—Ç–µ–π–∫–∏": {"name": "–°—Ç–µ–π–∫–∏", "url": "https://www.restoclub.ru/msk/search/stejk-haus-moskvy"},
    "kitchen_—Ä—ã–±–∞_–∏_–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": {"name": "–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "url": "https://www.restoclub.ru/msk/search/rybnie-restorany-v-moskve"},
    "kitchen_–ª—É—á—à–∏–µ_–±—É—Ä–≥–µ—Ä—ã": {"name": "–õ—É—á—à–∏–µ –±—É—Ä–≥–µ—Ä—ã", "url": "https://www.restoclub.ru/msk/search/luchshie-burgery-v-moskve"}
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ö–Ω–∏"
@router.message(F.text == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ö–Ω–∏ –∏ –±–ª—é–¥–∞ üçú")
async def show_popular_kitchens(message: Message):
    keyboard = kb.get_popular_kitchen_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("kitchen_"))
async def process_kitchen_callback(callback: CallbackQuery):
    key = callback.data
    category_kitchen = POPULAR_KITCHENS.get(key)

    if not category_kitchen:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫—É—Ö–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await callback.message.edit_text(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é: {category_kitchen['name']}...")

    results = await pars.parse_popular_kitchen_page_async(category_kitchen["url"])

    if not results:
        await callback.message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = f"üìç <b>{category_kitchen['name']}</b>:\n\n"

    for r in results[:5]:
        link_text = f'<a href="{r["link"]}">–°—Å—ã–ª–∫–∞</a>'
        cuisines = ", ".join(r["cuisines"])
        text += (
            f"üçΩ <b>{r['name']}</b>\n"
            f"üìç {r['location']}\n"
            f"üí∞ {r['price']}\n"
            f"üç¥ {r['description']}\n"
            f"üîó {link_text}\n\n"
        )

    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb.back_to_popular_kitchens_keyboard())

@router.callback_query(F.data == "back_to_popular_kitchens")
async def handle_back_to_popular_kitchens(callback: CallbackQuery):
    keyboard = kb.get_popular_kitchen_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()
#-------------
@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def process_contacts(message: Message):
    contact_info = (
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +1234567890\n"
        "‚úâÔ∏è Email: example@example.com\n"
        "üåê –í–µ–±—Å–∞–π—Ç: www.example.com\n"
        "üè† –ê–¥—Ä–µ—Å: —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥–æ–º 1"
    )
    await message.answer(contact_info)


async def generate_pdf(promotions):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –≤ –ø–∞–º—è—Ç–∏."""
    return await asyncio.to_thread(_generate_pdf_sync, promotions)


def _generate_pdf_sync(promotions):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –≤ –ø–∞–º—è—Ç–∏ —Å –∞–∫—Ü–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏."""

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
    pdf_buffer = io.BytesIO()
    doc = SimpleDocTemplate(pdf_buffer, pagesize=letter)
    elements = []

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    title_style = ParagraphStyle(
        name='Title',
        fontName='DejaVuSans',
        fontSize=20,
        alignment=1,
        spaceAfter=16,
        textColor='#2C3E50',
        fontWeight='bold'
    )

    header_style = ParagraphStyle(
        name='Header',
        fontName='DejaVuSans',
        fontSize=14,
        alignment=1,
        spaceAfter=12,
        textColor='#2980B9',
        fontStyle='italic'
    )

    normal_style = ParagraphStyle(
        name='Normal',
        fontName='DejaVuSans',
        fontSize=12,
        alignment=0,
        spaceAfter=8,
        textColor='#34495E'
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    from datetime import datetime
    current_date = datetime.now().strftime("%d. %m. %Y")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    elements.append(Paragraph(" –°–∫–∏–¥–∫–∏ –∏ –ê–∫—Ü–∏–∏", title_style))
    elements.append(Spacer(1, 0.05 * letter[1]))

    # –í–≤–µ–¥–µ–Ω–∏–µ
    elements.append(Paragraph(
        f"–í –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–∞ {current_date} –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
        "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º–∏!", header_style))
    elements.append(Spacer(1, 0.15 * letter[1]))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö
    for promo in promotions:
        promo_text = (
            f"<b>–ê–∫—Ü–∏—è:</b> {promo.description}<br/>"
            f"<b>–°–∫–∏–¥–∫–∞:</b> {promo.discount_percentage}%<br/>"
            f"<b>–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è:</b> —Å {promo.start_date.strftime('%d. %m. %Y')} –ø–æ {promo.end_date.strftime('%d. %m. %Y')}<br/>"
        )
        elements.append(Paragraph(promo_text, normal_style))
        elements.append(Spacer(1, 0.05 * letter[1]))  # –£–º–µ–Ω—å—à–µ–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–∫—Ü–∏—è–º–∏

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ PDF
    doc.build(elements)
    pdf_buffer.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ
    return pdf_buffer



@router.message(lambda message: message.text == "–ê–∫—Ü–∏–∏")
async def process_contacts(message: types.Message):
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
        promotions = await rq_b.find_promotion()

        if promotions:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è {len(promotions)} –∞–∫—Ü–∏–π...")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –≤ –ø–∞–º—è—Ç–∏
            pdf_buffer = await generate_pdf(promotions)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
            logger.info("PDF —Ñ–∞–π–ª —Å –∞–∫—Ü–∏—è–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–º—è—Ç–∏.")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-—Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏
            await message.answer("üéâ –í–æ—Ç –≤–∞—à —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏!")
            await message.answer_document(
                BufferedInputFile(pdf_buffer.read(), filename="promotions.pdf"),
                caption="–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏!"
            )

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            logger.info(f"PDF —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}.")

        else:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∞–∫—Ü–∏–π –Ω–µ—Ç
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–∫—Ü–∏–∏, –Ω–æ –∏—Ö –Ω–µ—Ç.")
            await message.answer("‚ùå *–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π.*")

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–∫—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


@router.message(F.text == "–û –Ω–∞—Å")
async def process_about(message: Message):
    about_info = (
        "–ú—ã ‚Äî —Ä–µ—Å—Ç–æ—Ä–∞–Ω Mari —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –≥–¥–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–∫—É—Å–∞–º–∏. "
        "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö –≤ —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –Ω–∞—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π!\n\n"
        "–ú—ã —è–≤–ª—è–µ–º—Å—è —Å–µ—Ç—å—é –∏–∑ 4 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:\n\n"
        "1. Mari ‚Äî —É–ª. –õ–æ–±–Ω–µ–Ω—Å–∫–∞—è, 4–ê, ‚òé 8 (495) 526-33-03\n"
        "2. Mari ‚Äî —É–ª. –ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è, 17, ‚òé 8 (495) 616-33-03\n"
        "3. Mari ‚Äî —É–ª. –î–µ–∂–Ω–µ–≤–∞, 13, ‚òé 8 (496) 616-66-03\n"
        "4. Mari ‚Äî –ø—Ä-—Ç –ú–∏—Ä–∞, 97, ‚òé 8 (495) 616-66-03\n\n"
        "üìß –î–ª—è —Å–≤—è–∑–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: info@mari-rest.ru\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –≤–∏–∑–∏—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º –∏ –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ —Ç–µ–ø–ª–æ–º –∏ –∑–∞–±–æ—Ç–æ–π. "
        "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ Mari, —á—Ç–æ–±—ã –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –≤–∫—É—Å–æ–º –∏ —É—é—Ç–æ–º! ‚ù§Ô∏è"
    )

    await message.answer(about_info)

#----------------------------------------------- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

@router.message(F.text == "–ë—Ä–æ–Ω—å")
async def register_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é üòä", reply_markup=kb.main_without_bron)
    await state.set_state(Register.rest_id)

    restaurants = await rq_b.all_rest_view()
    if not restaurants:
        await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    markup = kb.generate_restaurant_buttons(restaurants)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=markup)

@router.callback_query(Register.rest_id)
async def register_restaurant(callback: CallbackQuery, state: FSMContext):
    try:
        data = callback.data.split(":")
        restaurant_id = int(data[1])
        restaurant_name = data[2]

        await state.update_data(restaurant_id=restaurant_id, restaurant_name=restaurant_name)
        await state.set_state(Register.date)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.generate_date_buttons())
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(Register.date)
async def register_date(callback: CallbackQuery, state: FSMContext):
    try:
        day = int(callback.data.split(":")[1])
        date = (datetime.now().date() + timedelta(days=day)).strftime("%d-%m-%Y")

        await state.update_data(date=date)
        await state.set_state(Register.time)
        time_buttons = kb.generate_time_buttons(date)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_buttons)
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(Register.time)
async def register_time(callback: CallbackQuery, state: FSMContext):
    try:
        hour = int(callback.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        time = f"{hour:02d}:00"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00)

        await state.update_data(time=time)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(Register.hours)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
        hours_buttons = kb.generate_hours_buttons(selected_time=hour)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=hours_buttons
        )
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(Register.hours)
async def register_hours(callback: CallbackQuery, state: FSMContext):
    try:
        hours = int(callback.data.split(":")[1])
        await state.update_data(hours=hours)

        await state.set_state(Register.number_of_guests)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Register.number_of_guests)
async def register_guests(message: Message, state: FSMContext):
    if message.text.isdigit():
        number_of_guests = int(message.text)
        if number_of_guests <= 10:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
            data = await state.get_data()
            reservation_time = datetime.strptime(f"{data['date']} {data['time']}", "%d-%m-%Y %H:%M")
            restaurant_id = data['restaurant_id']
            reservation_hours = data['hours']


            suitable_tables = await rq_b.find_suitable_table(restaurant_id, number_of_guests, reservation_time, reservation_hours)

            if suitable_tables:
                markup = kb.generate_table_buttons(suitable_tables)
                await state.update_data(number_of_guests=number_of_guests)
                await state.set_state(Register.table_choice)
                phot = FSInputFile('D:\\PycharmProjects\\bron_kur\\—Å—Ç–æ–ª—ã2.jpg')
                await message.answer_photo(phot)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫:", reply_markup=markup)
            else:
                await message.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
                await state.clear()
        else:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π ‚Äî 6.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π —á–∏—Å–ª–æ–º.")



@router.callback_query(lambda c: c.data and c.data.startswith("select_table:"))
async def register_table_choice(callback: CallbackQuery, state: FSMContext):
    try:
        _, table_id, table_number = callback.data.split(":")
        table_id = int(table_id)
        table_number = int(table_number)

        await state.update_data(table_id=table_id, table_number=table_number)
        await state.set_state(Register.name)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    except Exception as e:
        print(f"Error in register_table_choice: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —Å—Ç–æ–ª–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)

    await state.set_state(Register.confirm)
    await confirm_reservation(message, state)

async def confirm_reservation(message: Message, state: FSMContext):
    data = await state.get_data()
    confirmation = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        f"üè† –†–µ—Å—Ç–æ—Ä–∞–Ω: {data['restaurant_name']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
        f"‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['hours']} —á.\n"
        f"üë• –ì–æ—Å—Ç–µ–π: {data['number_of_guests']}\n"
        f"ü™ë –°—Ç–æ–ª–∏–∫: {data['table_number']}\n"
        f"üôç –ò–º—è: {data['name']}\n"
    )
    await message.answer(confirmation, reply_markup=kb.confirmation_buttons())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(lambda c: c.data and c.data.startswith("confirm:"))
async def process_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.data == "confirm:yes":
        data = await state.get_data()
        reservation_time = datetime.strptime(f"{data['date']} {data['time']}", "%d-%m-%Y %H:%M")
        reservation_id = await rq_b.create_reservation(reservation_time,callback.from_user.id, data["name"], data["number_of_guests"],data["hours"],data['table_id'])
        await callback.message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        await state.update_data(reservation_id=reservation_id)
        await callback.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑ ?", reply_markup=kb.preorders_buttons())
        # await state.clear()
    elif callback.data == "confirm:no":
        await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=kb.correction_buttons())


#------------------------------PREORDER
@router.callback_query(lambda c: c.data and c.data.startswith("preorder:"))
async def register_preorder(callback: CallbackQuery, state: FSMContext):
    if callback.data == "preorder:yes":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        markup = await kb.generate_category_keyboard()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:", reply_markup=markup)
    elif callback.data == "preorder:no":
        await callback.message.answer("–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏ ", reply_markup=kb.main)
        # await state.set_state(Register.confirm)
        # await confirm_reservation(callback.message, state)




@router.callback_query(lambda c: c.data and c.data.startswith("category:"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    menu_items = await rq_b.get_menu_by_category(category)

    if not menu_items:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–ª—é–¥
    markup = kb.generate_dish_keyboard(menu_items)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category.capitalize()}.\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥:", reply_markup=markup)


@router.callback_query(lambda c: c.data and c.data.startswith("dish:"))
async def select_dish(callback: CallbackQuery, state: FSMContext):
    dish_id = int(callback.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –±–ª—é–¥–∞

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    markup = kb.generate_quantity_keyboard(dish_id)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", reply_markup=markup)


@router.callback_query(lambda c: c.data and c.data.startswith("quantity:"))
async def select_quantity(callback: CallbackQuery, state: FSMContext):
    _, dish_id, quantity = callback.data.split(":")
    dish_id = int(dish_id)
    quantity = int(quantity)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ
    async with async_session() as session:
        dish = await session.get(Menu, dish_id)

    if not dish:
        await callback.message.answer("–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ FSMContext
    data = await state.get_data()
    cart = data.get("cart", {})  # –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if dish_id in cart:
        cart[dish_id]["quantity"] += quantity
    else:
        cart[dish_id] = {
            "name": dish.name_dish,
            "quantity": quantity,
            "price": dish.price,
        }
    await state.update_data(cart=cart)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    await callback.message.answer(
        f"{quantity} x {dish.name_dish} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑.",reply_markup=kb.end_preorder
    )

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    markup = await kb.generate_category_keyboard()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:", reply_markup=markup)

@router.callback_query(lambda c: c.data == "finish_preorder")
async def finish_preorder(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", {})  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    reservation_id = data.get("reservation_id")  # –ü–æ–ª—É—á–∞–µ–º ID –±—Ä–æ–Ω–∏

    if not reservation_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return

    if not cart:
        await callback.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Ç–æ–≥–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
    order_summary = "–í–∞—à –ø—Ä–µ–¥–∑–∞–∫–∞–∑:\n\n"
    total_price = 0

    for dish_id, dish in cart.items():  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ—Ä–∑–∏–Ω–µ –∫–∞–∫ –ø–æ —Å–ª–æ–≤–∞—Ä—é
        order_summary += (
            f"üçΩ {dish['name']} - {dish['quantity']} —à—Ç. "
            f"({dish['price']} —Ä—É–±. –∑–∞ —à—Ç.)\n"
        )
        total_price += dish['quantity'] * dish['price']

    order_summary += f"\nüíµ –ò—Ç–æ–≥–æ: {total_price} —Ä—É–±."

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑
    await callback.message.answer(order_summary)

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑
        await rq_b.create_preorder(reservation_id, cart)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞
        await callback.message.answer("–ü—Ä–µ–¥–∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!",reply_markup=kb.main)
        await state.clear()  # –≠—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞: {str(e)}")



@router.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º".
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    category_keyboard = await kb.generate_category_keyboard()

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=category_keyboard
    )


#-------------------–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext




@router.message(F.text == '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
async def start_event_process(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å?", reply_markup=kb.event_types_keyboard)
    await state.set_state(EventApplicationStates.event_type)


@router.message(EventApplicationStates.event_type)
async def process_event_type(message: Message, state: FSMContext):
    event_type = message.text.strip()
    await state.update_data(event_type=event_type)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    restaurants = await rq_b.get_recommended_restaurants(event_type)

    if not restaurants:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return

    restaurant_list = "\n".join([
        f"{r['restaurant_name']} - {r['address']}\n({r['recommendation_description']})"
        for r in restaurants
    ])

    await message.answer(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:\n\n{restaurant_list}")
    await message.answer("–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º?")
    await state.set_state(EventApplicationStates.restaurant_choice)


@router.message(EventApplicationStates.restaurant_choice)
async def process_restaurant_choice(message: Message, state: FSMContext):
    restaurant_choice = message.text.strip()
    await state.update_data(restaurant_choice=restaurant_choice)

    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-15 18:00):")
    await state.set_state(EventApplicationStates.requested_date)


@router.message(EventApplicationStates.requested_date)
async def process_requested_date(message: Message, state: FSMContext):
    date_time = message.text.strip()
    await state.update_data(requested_date=date_time)

    await message.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?")
    await state.set_state(EventApplicationStates.guest_count)


@router.message(EventApplicationStates.guest_count)
async def process_guest_count(message: Message, state: FSMContext):
    guest_count = int(message.text.strip())
    await state.update_data(guest_count=guest_count)

    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(EventApplicationStates.message_to_manager)


@router.message(EventApplicationStates.message_to_manager)
async def process_message_to_manager(message: Message, state: FSMContext):
    message_text = message.text.strip()
    await state.update_data(message=message_text)

    data = await state.get_data()

    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
        f"–¢–∏–ø: {data['event_type']}\n"
        f"–ó–∞–≤–µ–¥–µ–Ω–∏–µ: {data['restaurant_choice']}\n"
        f"–î–∞—Ç–∞: {data['requested_date']}\n"
        f"–ì–æ—Å—Ç–µ–π: {data['guest_count']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏?",
        reply_markup=kb.confirm_keyboard()
    )

    await state.set_state(EventApplicationStates.confirm_application)

@router.callback_query(EventApplicationStates.confirm_application, F.data == "confirm_application")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    async with async_session() as session:
        result = await session.execute(
            select(Clients.client_id).where(Clients.tg_id == callback.from_user.id)
        )
        client_id_db = result.scalar()
        if not client_id_db:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ.")
            await state.clear()
            return

        result = await session.execute(
            select(EventTypes.event_type_id).where(EventTypes.name == data['event_type'])
        )
        event_type_id = result.scalar()
        if not event_type_id:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            await state.clear()
            return

        restaurant_id = None
        if data['restaurant_choice'] and data['restaurant_choice'] != '–ù–µ—Ç':
            result = await session.execute(
                select(Restaurants.restaurant_id).where(Restaurants.restaurant_name.ilike(f"%{data['restaurant_choice']}%"))
            )
            restaurant_id = result.scalar()

        try:
            requested_date = datetime.strptime(data['requested_date'], "%Y-%m-%d %H:%M")
        except ValueError:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
            await state.clear()
            return

        application = EventApplications(
            client_id=client_id_db,
            event_type_id=event_type_id,
            restaurant_id=restaurant_id,
            requested_date=requested_date,
            guest_count=int(data['guest_count']),
            message=data.get('message', ''),
        )

        session.add(application)
        await session.commit()

    await callback.message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",reply_markup=kb.main)
    await state.clear()


@router.message(EventApplicationStates.confirm_application, F.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_application(message: Message, state: FSMContext):
    await message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State


class AIState(StatesGroup):
    active = State()

@router.message(Command("aihelp"))
async def ai_help(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º AI-–≥–∏–¥a.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.ai_reply_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–æ–∫
@router.message(F.text == "üîÆ –í–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∂–∏–º")
async def ai_on(message: Message, state: FSMContext):
    await state.set_state(AIState.active)
    await state.update_data(ai_mode=True)
    await message.answer("AI-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω! –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ü–æ—Å–æ–≤–µ—Ç—É–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏¬ª.")

@router.message(F.text == "üö´ –í—ã–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∂–∏–º")
async def ai_off(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("AI-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)

@router.message(F.text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def exit_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main)

@router.message()
async def handle_any_message(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("ai_mode"):
        await message.answer("–î—É–º–∞—é... ü§ñ")
        response = ask_llm_ollama(message.text)
        await message.answer(response)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /aihelp –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI-–≥–∏–¥–∞.")

