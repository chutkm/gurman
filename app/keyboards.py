from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
# import locale
# locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ callback –¥–∞–Ω–Ω—ã—Ö
import app.database.requests_bot as rq_b
def make_callback_data(action, value):
    return f"{action}:{value}"

def booking_keyboard(booking_id: int, is_active: bool) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data=f"preorder_history:{booking_id}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_history:{booking_id}")],
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_history:{booking_id}")]
        ]
    )
#----------------------
async def generate_category_keyboard():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –±–ª—é–¥ –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ.
    """
    categories = await rq_b.get_categories()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        builder.row(
            InlineKeyboardButton(text=category.capitalize(), callback_data=f"category:{category}")
        )



    return builder.as_markup()

def generate_dish_keyboard(menu_items):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–ª—é–¥–∞–º–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞.
    """
    markup = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –±–ª—é–¥–∞–º–∏
    buttons_row = []
    for i, item in enumerate(menu_items):
        callback_data = f"dish:{item.menu_id}"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ callback_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
        buttons_row.append(InlineKeyboardButton(
            text=f"{item.name_dish} - {item.price} —Ä.",
            callback_data=callback_data
        ))

        # –ö–æ–≥–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ 2 –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        if len(buttons_row) == 1:
            markup.row(*buttons_row)  # –î–æ–±–∞–≤–ª—è–µ–º 2 –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            buttons_row = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
    if buttons_row:
        markup.row(*buttons_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    back_to_categories_button = InlineKeyboardButton(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="back_to_categories"
    )
    markup.row(back_to_categories_button)

    return markup.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
def generate_quantity_keyboard(dish_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞.
    """
    markup = InlineKeyboardBuilder()
    for i in range(1, 6):  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç 1 –¥–æ 10
        callback_data = f"quantity:{dish_id}:{i}"
        markup.add(InlineKeyboardButton(text=str(i), callback_data=callback_data))



    return markup.as_markup()



# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑"
end_preorder = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(
        text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑",
        callback_data="finish_preorder"
    )]
])
main = ReplyKeyboardMarkup(
    keyboard=[
        # [KeyboardButton(text='–ù–∞–π—Ç–∏ –†–µ—Å—Ç–æ—Ä–∞–Ω üçΩ')],
        # [KeyboardButton(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üéâ')],
        [KeyboardButton(text='–ë—Ä–æ–Ω—å'),KeyboardButton(text='–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')],
        [KeyboardButton(text='–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'),],
        [KeyboardButton(text='–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ö–Ω–∏ –∏ –±–ª—é–¥–∞ üçú')],
        [KeyboardButton(text='–ß–∞—Å—Ç–æ –∏—â—É—Ç üîé'), KeyboardButton(text='–ê–∫—Ü–∏–∏ –∏ –Ω–æ–≤–∏–Ω–∫–∏')]#–°–∫–∏–¥–∫–∏ –∏ –ê–∫—Ü–∏–∏
    ],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'
)
#--------------LLMs
# def ai_mode_buttons():
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üîÆ –í–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∂–∏–º", callback_data="ai_on")],
#         [InlineKeyboardButton(text="üö´ –í—ã–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∂–∏–º", callback_data="ai_off")]
#     ])
def ai_reply_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÆ –í–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∂–∏–º")],
            [KeyboardButton(text="üö´ –í—ã–∫–ª—é—á–∏—Ç—å AI-—Ä–µ–∂–∏–º")],
            [KeyboardButton(text="‚Ü©Ô∏è –í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


def salas_new_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–°–∫–∏–¥–∫–∏ –∏ –ê–∫—Ü–∏–∏', callback_data='promotions')],
            [InlineKeyboardButton(text='–ù–æ–≤–∏–Ω–∫–∏ –≤ –º–µ–Ω—é', callback_data='new_dishes')],
            [InlineKeyboardButton(text='–ù–æ–≤–æ—Å—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏', callback_data='news')],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
        ]
    )

def get_popular_kitchen_keyboard() -> InlineKeyboardMarkup:
    category_kitchens = [
        "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–Ø–ø–æ–Ω—Å–∫–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–°—Ç–µ–π–∫–∏",
        "–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
        "–õ—É—á—à–∏–µ –±—É—Ä–≥–µ—Ä—ã"
    ]

    inline_keyboard = []
    for i in range(0, len(category_kitchens), 2):
        row = []
        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        row.append(
            InlineKeyboardButton(
                text=category_kitchens[i],
                callback_data=f"kitchen_{category_kitchens[i].replace(' ', '_').lower()}"
            )
        )
        if i + 1 < len(category_kitchens):
            row.append(
                InlineKeyboardButton(
                    text=category_kitchens[i + 1],
                    callback_data=f"kitchen_{category_kitchens[i + 1].replace(' ', '_').lower()}"
                )
            )
        inline_keyboard.append(row)

    inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

def back_to_popular_kitchens_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∫—É—Ö–Ω—è–º", callback_data="back_to_popular_kitchens")]
        ]
    )

def get_categories_keyboard() -> InlineKeyboardMarkup:
    categories = [
        "–ö—É–¥–∞ –ø–æ–π—Ç–∏ —Å –¥–µ—Ç—å–º–∏ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ",
        "–ù–æ–≤—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã üÜï",
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã üèô",
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ —Å –≤–µ—Ä–∞–Ω–¥–æ–π üåø",
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã —Å –ª–∞–Ω—á–∞–º–∏ üçΩ",
        "–ö–æ—Ñ–µ–π–Ω–∏ –ú–æ—Å–∫–≤—ã ‚òïÔ∏è"
    ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫, –ø–æ 2 –≤ —Ä—è–¥
    inline_keyboard = []
    for i in range(0, len(categories), 2):
        row = []
        row.append(
            InlineKeyboardButton(text=categories[i], callback_data=f"category_{i}")
        )
        if i + 1 < len(categories):
            row.append(
                InlineKeyboardButton(text=categories[i + 1], callback_data=f"category_{i + 1}")
            )
        inline_keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

main_without_bron = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã'), KeyboardButton(text='–û –Ω–∞—Å')]
    ],
    resize_keyboard=True,
    input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
)

# back_menu = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back')]
# ])


get_number = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)],
        [KeyboardButton(text='–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é')]
    ],
    resize_keyboard=True
)


def generate_restaurant_buttons(restaurants):
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for restaurant in restaurants:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        restaurant_name = restaurant.restaurant_name[:64]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data
        callback_data = f"restaurant:{restaurant.restaurant_id}:{restaurant_name}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã callback_data
        if len(callback_data) > 64:
            callback_data = callback_data[:64]  # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        keyboard.inline_keyboard.append([  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫
            InlineKeyboardButton(
                text=restaurant.restaurant_name,  # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data=callback_data  # –î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
    keyboard.inline_keyboard.append([back_button])

    return keyboard



def generate_date_buttons():
    today = datetime.now().date()
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
    for i in range(7):  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ 7 –¥–Ω–µ–π
        date = today + timedelta(days=i)
        buttons.append(
            InlineKeyboardButton(
                text=date.strftime('%a, %d.%m'),
                callback_data=make_callback_data("date", i)
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_keyboard = [
        buttons[:4],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 4 –¥–Ω—è
        buttons[4:7], # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: 3 –¥–Ω—è
        [back_button] # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ]

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


def generate_hours_buttons(selected_time: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

    :param selected_time: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —á–∞—Å–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 18 –¥–ª—è 18:00)
    """
    builder = InlineKeyboardBuilder()
    closing_hour = 22  # –†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 22:00

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    max_hours = min(closing_hour - selected_time, 5)

    for hour_ in range(1, max_hours + 1):  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Å—ã
        builder.add(
            InlineKeyboardButton(
                text=f"{hour_} —á–∞—Å" if hour_ == 1 else f"{hour_} —á–∞—Å–∞",
                callback_data=make_callback_data("hours", hour_)
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back"))
    return builder.as_markup()



def generate_time_buttons(selected_date: str) -> InlineKeyboardMarkup:
    now = datetime.now()
    builder = InlineKeyboardBuilder()
    time_slots = range(10, 22)  # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å 10:00 –¥–æ 22:00

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è, –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
    if selected_date == now.strftime("%d-%m-%Y"):
        time_slots = [hour for hour in time_slots if hour > now.hour]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    for hour in time_slots:
        builder.button(
            text=f"{hour:02d}:00",
            callback_data=f"time:{hour}"
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back"
    )

    # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return builder.as_markup()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∏–∫–∞
from aiogram.utils.keyboard import InlineKeyboardBuilder

def generate_table_buttons(suitable_tables):
    builder = InlineKeyboardBuilder()

    buttons_row = []

    for i, table in enumerate(suitable_tables):
        buttons_row.append(
            InlineKeyboardButton(
                text=f"–°—Ç–æ–ª ‚Ññ{table.table_number} ({table.place_type})",
                callback_data=f"select_table:{table.table_id}:{table.table_number}"
            )
        )

        if len(buttons_row) == 2:
            builder.row(*buttons_row)
            buttons_row = []

    if buttons_row:
        builder.row(*buttons_row)

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back"))

    return builder.as_markup()


def preorders_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="preorder:yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="preorder:no")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
    ])


#–∫–ª–∞–≤–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–Ω—Ñ—ã –æ –±—Ä–æ–Ω–∏ - –≤–µ—Ä–Ω–∞—è –ª–∏ –æ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç
def confirmation_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="confirm:yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm:no")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
    ])

def correction_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="correct:date")],
        [InlineKeyboardButton(text="–í—Ä–µ–º—è", callback_data="correct:time")],
        [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π", callback_data="correct:guests")],
        [InlineKeyboardButton(text="–ò–º—è", callback_data="correct:name")],
        [InlineKeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="correct:number")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

#–æ—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏
def cancel_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="cancel:yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel:no")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
    ])


def find_restaurant_button():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ù–∞–π—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω üçΩ"))
    return kb


#–Ω–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def back_to_categories_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="show_categories")]
        ]
    )



#---------–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
event_types_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–≤–∞–¥—å–±–∞")],
        [KeyboardButton(text="–ë–∞–Ω–∫–µ—Ç")],
        [KeyboardButton(text="–î–µ—Ç—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫")],
        [KeyboardButton(text="–Æ–±–∏–ª–µ–π")],
        [KeyboardButton(text="–í–µ–Ω–¥–∏–Ω–≥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

def confirm_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_application")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
        ]
    )